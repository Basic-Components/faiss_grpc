// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: faiss_grpc.proto
#ifndef GRPC_faiss_5fgrpc_2eproto__INCLUDED
#define GRPC_faiss_5fgrpc_2eproto__INCLUDED

#include "faiss_grpc.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace faiss_grpc {

class FAISS_GRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "faiss_grpc.FAISS_GRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status search(::grpc::ClientContext* context, const ::faiss_grpc::Query& request, ::faiss_grpc::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::Response>> Asyncsearch(::grpc::ClientContext* context, const ::faiss_grpc::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::Response>>(AsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::Response>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::faiss_grpc::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::Response>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::faiss_grpc::Query, ::faiss_grpc::Response>> batch_search(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::faiss_grpc::Query, ::faiss_grpc::Response>>(batch_searchRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::faiss_grpc::Query, ::faiss_grpc::Response>> Asyncbatch_search(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::faiss_grpc::Query, ::faiss_grpc::Response>>(Asyncbatch_searchRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::faiss_grpc::Query, ::faiss_grpc::Response>> PrepareAsyncbatch_search(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::faiss_grpc::Query, ::faiss_grpc::Response>>(PrepareAsyncbatch_searchRaw(context, cq));
    }
    virtual ::grpc::Status get_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery& request, ::faiss_grpc::ListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ListResponse>> Asyncget_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ListResponse>>(Asyncget_index_listRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ListResponse>> PrepareAsyncget_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ListResponse>>(PrepareAsyncget_index_listRaw(context, request, cq));
    }
    virtual ::grpc::Status get_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery& request, ::faiss_grpc::MetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::MetadataResponse>> Asyncget_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::MetadataResponse>>(Asyncget_index_metadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::MetadataResponse>> PrepareAsyncget_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::MetadataResponse>>(PrepareAsyncget_index_metadataRaw(context, request, cq));
    }
    virtual ::grpc::Status reload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery& request, ::faiss_grpc::ReloadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ReloadResponse>> Asyncreload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ReloadResponse>>(Asyncreload_indexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ReloadResponse>> PrepareAsyncreload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ReloadResponse>>(PrepareAsyncreload_indexRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void search(::grpc::ClientContext* context, const ::faiss_grpc::Query* request, ::faiss_grpc::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void search(::grpc::ClientContext* context, const ::faiss_grpc::Query* request, ::faiss_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void search(::grpc::ClientContext* context, const ::faiss_grpc::Query* request, ::faiss_grpc::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void batch_search(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::faiss_grpc::Query,::faiss_grpc::Response>* reactor) = 0;
      #else
      virtual void batch_search(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::faiss_grpc::Query,::faiss_grpc::Response>* reactor) = 0;
      #endif
      virtual void get_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery* request, ::faiss_grpc::ListResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void get_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery* request, ::faiss_grpc::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void get_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery* request, ::faiss_grpc::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void get_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery* request, ::faiss_grpc::MetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void get_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery* request, ::faiss_grpc::MetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void get_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery* request, ::faiss_grpc::MetadataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void reload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery* request, ::faiss_grpc::ReloadResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void reload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery* request, ::faiss_grpc::ReloadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void reload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery* request, ::faiss_grpc::ReloadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::Response>* AsyncsearchRaw(::grpc::ClientContext* context, const ::faiss_grpc::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::Response>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::faiss_grpc::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::faiss_grpc::Query, ::faiss_grpc::Response>* batch_searchRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::faiss_grpc::Query, ::faiss_grpc::Response>* Asyncbatch_searchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::faiss_grpc::Query, ::faiss_grpc::Response>* PrepareAsyncbatch_searchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ListResponse>* Asyncget_index_listRaw(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ListResponse>* PrepareAsyncget_index_listRaw(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::MetadataResponse>* Asyncget_index_metadataRaw(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::MetadataResponse>* PrepareAsyncget_index_metadataRaw(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ReloadResponse>* Asyncreload_indexRaw(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faiss_grpc::ReloadResponse>* PrepareAsyncreload_indexRaw(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status search(::grpc::ClientContext* context, const ::faiss_grpc::Query& request, ::faiss_grpc::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::Response>> Asyncsearch(::grpc::ClientContext* context, const ::faiss_grpc::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::Response>>(AsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::Response>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::faiss_grpc::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::Response>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::faiss_grpc::Query, ::faiss_grpc::Response>> batch_search(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::faiss_grpc::Query, ::faiss_grpc::Response>>(batch_searchRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::faiss_grpc::Query, ::faiss_grpc::Response>> Asyncbatch_search(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::faiss_grpc::Query, ::faiss_grpc::Response>>(Asyncbatch_searchRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::faiss_grpc::Query, ::faiss_grpc::Response>> PrepareAsyncbatch_search(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::faiss_grpc::Query, ::faiss_grpc::Response>>(PrepareAsyncbatch_searchRaw(context, cq));
    }
    ::grpc::Status get_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery& request, ::faiss_grpc::ListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ListResponse>> Asyncget_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ListResponse>>(Asyncget_index_listRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ListResponse>> PrepareAsyncget_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ListResponse>>(PrepareAsyncget_index_listRaw(context, request, cq));
    }
    ::grpc::Status get_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery& request, ::faiss_grpc::MetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::MetadataResponse>> Asyncget_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::MetadataResponse>>(Asyncget_index_metadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::MetadataResponse>> PrepareAsyncget_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::MetadataResponse>>(PrepareAsyncget_index_metadataRaw(context, request, cq));
    }
    ::grpc::Status reload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery& request, ::faiss_grpc::ReloadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ReloadResponse>> Asyncreload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ReloadResponse>>(Asyncreload_indexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ReloadResponse>> PrepareAsyncreload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ReloadResponse>>(PrepareAsyncreload_indexRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void search(::grpc::ClientContext* context, const ::faiss_grpc::Query* request, ::faiss_grpc::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void search(::grpc::ClientContext* context, const ::faiss_grpc::Query* request, ::faiss_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void search(::grpc::ClientContext* context, const ::faiss_grpc::Query* request, ::faiss_grpc::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void batch_search(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::faiss_grpc::Query,::faiss_grpc::Response>* reactor) override;
      #else
      void batch_search(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::faiss_grpc::Query,::faiss_grpc::Response>* reactor) override;
      #endif
      void get_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery* request, ::faiss_grpc::ListResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void get_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery* request, ::faiss_grpc::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void get_index_list(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery* request, ::faiss_grpc::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void get_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery* request, ::faiss_grpc::MetadataResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void get_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery* request, ::faiss_grpc::MetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void get_index_metadata(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery* request, ::faiss_grpc::MetadataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void reload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery* request, ::faiss_grpc::ReloadResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void reload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery* request, ::faiss_grpc::ReloadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void reload_index(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery* request, ::faiss_grpc::ReloadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::faiss_grpc::Response>* AsyncsearchRaw(::grpc::ClientContext* context, const ::faiss_grpc::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faiss_grpc::Response>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::faiss_grpc::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::faiss_grpc::Query, ::faiss_grpc::Response>* batch_searchRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::faiss_grpc::Query, ::faiss_grpc::Response>* Asyncbatch_searchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::faiss_grpc::Query, ::faiss_grpc::Response>* PrepareAsyncbatch_searchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ListResponse>* Asyncget_index_listRaw(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ListResponse>* PrepareAsyncget_index_listRaw(::grpc::ClientContext* context, const ::faiss_grpc::ListQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faiss_grpc::MetadataResponse>* Asyncget_index_metadataRaw(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faiss_grpc::MetadataResponse>* PrepareAsyncget_index_metadataRaw(::grpc::ClientContext* context, const ::faiss_grpc::MetadataQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ReloadResponse>* Asyncreload_indexRaw(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faiss_grpc::ReloadResponse>* PrepareAsyncreload_indexRaw(::grpc::ClientContext* context, const ::faiss_grpc::ReloadQuery& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_search_;
    const ::grpc::internal::RpcMethod rpcmethod_batch_search_;
    const ::grpc::internal::RpcMethod rpcmethod_get_index_list_;
    const ::grpc::internal::RpcMethod rpcmethod_get_index_metadata_;
    const ::grpc::internal::RpcMethod rpcmethod_reload_index_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status search(::grpc::ServerContext* context, const ::faiss_grpc::Query* request, ::faiss_grpc::Response* response);
    virtual ::grpc::Status batch_search(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::faiss_grpc::Response, ::faiss_grpc::Query>* stream);
    virtual ::grpc::Status get_index_list(::grpc::ServerContext* context, const ::faiss_grpc::ListQuery* request, ::faiss_grpc::ListResponse* response);
    virtual ::grpc::Status get_index_metadata(::grpc::ServerContext* context, const ::faiss_grpc::MetadataQuery* request, ::faiss_grpc::MetadataResponse* response);
    virtual ::grpc::Status reload_index(::grpc::ServerContext* context, const ::faiss_grpc::ReloadQuery* request, ::faiss_grpc::ReloadResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_search() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::faiss_grpc::Query* /*request*/, ::faiss_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::faiss_grpc::Query* request, ::grpc::ServerAsyncResponseWriter< ::faiss_grpc::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batch_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_batch_search() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_batch_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::faiss_grpc::Response, ::faiss_grpc::Query>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_search(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::faiss_grpc::Response, ::faiss_grpc::Query>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_index_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_index_list() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_get_index_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_index_list(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ListQuery* /*request*/, ::faiss_grpc::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_index_list(::grpc::ServerContext* context, ::faiss_grpc::ListQuery* request, ::grpc::ServerAsyncResponseWriter< ::faiss_grpc::ListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_index_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_index_metadata() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_get_index_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_index_metadata(::grpc::ServerContext* /*context*/, const ::faiss_grpc::MetadataQuery* /*request*/, ::faiss_grpc::MetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_index_metadata(::grpc::ServerContext* context, ::faiss_grpc::MetadataQuery* request, ::grpc::ServerAsyncResponseWriter< ::faiss_grpc::MetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_reload_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_reload_index() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_reload_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reload_index(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ReloadQuery* /*request*/, ::faiss_grpc::ReloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreload_index(::grpc::ServerContext* context, ::faiss_grpc::ReloadQuery* request, ::grpc::ServerAsyncResponseWriter< ::faiss_grpc::ReloadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_search<WithAsyncMethod_batch_search<WithAsyncMethod_get_index_list<WithAsyncMethod_get_index_metadata<WithAsyncMethod_reload_index<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_search() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::faiss_grpc::Query, ::faiss_grpc::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::faiss_grpc::Query* request, ::faiss_grpc::Response* response) { return this->search(context, request, response); }));}
    void SetMessageAllocatorFor_search(
        ::grpc::experimental::MessageAllocator< ::faiss_grpc::Query, ::faiss_grpc::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faiss_grpc::Query, ::faiss_grpc::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::faiss_grpc::Query* /*request*/, ::faiss_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* search(
      ::grpc::CallbackServerContext* /*context*/, const ::faiss_grpc::Query* /*request*/, ::faiss_grpc::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* search(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::faiss_grpc::Query* /*request*/, ::faiss_grpc::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_batch_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_batch_search() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::faiss_grpc::Query, ::faiss_grpc::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->batch_search(context); }));
    }
    ~ExperimentalWithCallbackMethod_batch_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::faiss_grpc::Response, ::faiss_grpc::Query>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::faiss_grpc::Query, ::faiss_grpc::Response>* batch_search(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::faiss_grpc::Query, ::faiss_grpc::Response>* batch_search(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_get_index_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_get_index_list() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::faiss_grpc::ListQuery, ::faiss_grpc::ListResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::faiss_grpc::ListQuery* request, ::faiss_grpc::ListResponse* response) { return this->get_index_list(context, request, response); }));}
    void SetMessageAllocatorFor_get_index_list(
        ::grpc::experimental::MessageAllocator< ::faiss_grpc::ListQuery, ::faiss_grpc::ListResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faiss_grpc::ListQuery, ::faiss_grpc::ListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_get_index_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_index_list(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ListQuery* /*request*/, ::faiss_grpc::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* get_index_list(
      ::grpc::CallbackServerContext* /*context*/, const ::faiss_grpc::ListQuery* /*request*/, ::faiss_grpc::ListResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* get_index_list(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::faiss_grpc::ListQuery* /*request*/, ::faiss_grpc::ListResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_get_index_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_get_index_metadata() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::faiss_grpc::MetadataQuery, ::faiss_grpc::MetadataResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::faiss_grpc::MetadataQuery* request, ::faiss_grpc::MetadataResponse* response) { return this->get_index_metadata(context, request, response); }));}
    void SetMessageAllocatorFor_get_index_metadata(
        ::grpc::experimental::MessageAllocator< ::faiss_grpc::MetadataQuery, ::faiss_grpc::MetadataResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faiss_grpc::MetadataQuery, ::faiss_grpc::MetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_get_index_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_index_metadata(::grpc::ServerContext* /*context*/, const ::faiss_grpc::MetadataQuery* /*request*/, ::faiss_grpc::MetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* get_index_metadata(
      ::grpc::CallbackServerContext* /*context*/, const ::faiss_grpc::MetadataQuery* /*request*/, ::faiss_grpc::MetadataResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* get_index_metadata(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::faiss_grpc::MetadataQuery* /*request*/, ::faiss_grpc::MetadataResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_reload_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_reload_index() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::faiss_grpc::ReloadQuery, ::faiss_grpc::ReloadResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::faiss_grpc::ReloadQuery* request, ::faiss_grpc::ReloadResponse* response) { return this->reload_index(context, request, response); }));}
    void SetMessageAllocatorFor_reload_index(
        ::grpc::experimental::MessageAllocator< ::faiss_grpc::ReloadQuery, ::faiss_grpc::ReloadResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faiss_grpc::ReloadQuery, ::faiss_grpc::ReloadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_reload_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reload_index(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ReloadQuery* /*request*/, ::faiss_grpc::ReloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* reload_index(
      ::grpc::CallbackServerContext* /*context*/, const ::faiss_grpc::ReloadQuery* /*request*/, ::faiss_grpc::ReloadResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* reload_index(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::faiss_grpc::ReloadQuery* /*request*/, ::faiss_grpc::ReloadResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_search<ExperimentalWithCallbackMethod_batch_search<ExperimentalWithCallbackMethod_get_index_list<ExperimentalWithCallbackMethod_get_index_metadata<ExperimentalWithCallbackMethod_reload_index<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_search<ExperimentalWithCallbackMethod_batch_search<ExperimentalWithCallbackMethod_get_index_list<ExperimentalWithCallbackMethod_get_index_metadata<ExperimentalWithCallbackMethod_reload_index<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_search() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::faiss_grpc::Query* /*request*/, ::faiss_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batch_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_batch_search() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_batch_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::faiss_grpc::Response, ::faiss_grpc::Query>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_index_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_index_list() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_get_index_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_index_list(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ListQuery* /*request*/, ::faiss_grpc::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_index_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_index_metadata() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_get_index_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_index_metadata(::grpc::ServerContext* /*context*/, const ::faiss_grpc::MetadataQuery* /*request*/, ::faiss_grpc::MetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_reload_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_reload_index() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_reload_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reload_index(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ReloadQuery* /*request*/, ::faiss_grpc::ReloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_search() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::faiss_grpc::Query* /*request*/, ::faiss_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_batch_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_batch_search() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_batch_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::faiss_grpc::Response, ::faiss_grpc::Query>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_search(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_index_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_index_list() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_get_index_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_index_list(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ListQuery* /*request*/, ::faiss_grpc::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_index_list(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_index_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_index_metadata() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_get_index_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_index_metadata(::grpc::ServerContext* /*context*/, const ::faiss_grpc::MetadataQuery* /*request*/, ::faiss_grpc::MetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_index_metadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_reload_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_reload_index() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_reload_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reload_index(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ReloadQuery* /*request*/, ::faiss_grpc::ReloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreload_index(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_search() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->search(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::faiss_grpc::Query* /*request*/, ::faiss_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* search(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* search(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_batch_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_batch_search() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->batch_search(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_batch_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::faiss_grpc::Response, ::faiss_grpc::Query>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* batch_search(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* batch_search(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_get_index_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_get_index_list() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_index_list(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_get_index_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_index_list(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ListQuery* /*request*/, ::faiss_grpc::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* get_index_list(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* get_index_list(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_get_index_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_get_index_metadata() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_index_metadata(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_get_index_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_index_metadata(::grpc::ServerContext* /*context*/, const ::faiss_grpc::MetadataQuery* /*request*/, ::faiss_grpc::MetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* get_index_metadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* get_index_metadata(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_reload_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_reload_index() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->reload_index(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_reload_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reload_index(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ReloadQuery* /*request*/, ::faiss_grpc::ReloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* reload_index(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* reload_index(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_search() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faiss_grpc::Query, ::faiss_grpc::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faiss_grpc::Query, ::faiss_grpc::Response>* streamer) {
                       return this->Streamedsearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::faiss_grpc::Query* /*request*/, ::faiss_grpc::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faiss_grpc::Query,::faiss_grpc::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_index_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_index_list() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faiss_grpc::ListQuery, ::faiss_grpc::ListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faiss_grpc::ListQuery, ::faiss_grpc::ListResponse>* streamer) {
                       return this->Streamedget_index_list(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_index_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_index_list(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ListQuery* /*request*/, ::faiss_grpc::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_index_list(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faiss_grpc::ListQuery,::faiss_grpc::ListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_index_metadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_index_metadata() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faiss_grpc::MetadataQuery, ::faiss_grpc::MetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faiss_grpc::MetadataQuery, ::faiss_grpc::MetadataResponse>* streamer) {
                       return this->Streamedget_index_metadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_index_metadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_index_metadata(::grpc::ServerContext* /*context*/, const ::faiss_grpc::MetadataQuery* /*request*/, ::faiss_grpc::MetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_index_metadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faiss_grpc::MetadataQuery,::faiss_grpc::MetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_reload_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_reload_index() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faiss_grpc::ReloadQuery, ::faiss_grpc::ReloadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faiss_grpc::ReloadQuery, ::faiss_grpc::ReloadResponse>* streamer) {
                       return this->Streamedreload_index(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_reload_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status reload_index(::grpc::ServerContext* /*context*/, const ::faiss_grpc::ReloadQuery* /*request*/, ::faiss_grpc::ReloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreload_index(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faiss_grpc::ReloadQuery,::faiss_grpc::ReloadResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_search<WithStreamedUnaryMethod_get_index_list<WithStreamedUnaryMethod_get_index_metadata<WithStreamedUnaryMethod_reload_index<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_search<WithStreamedUnaryMethod_get_index_list<WithStreamedUnaryMethod_get_index_metadata<WithStreamedUnaryMethod_reload_index<Service > > > > StreamedService;
};

}  // namespace faiss_grpc


#endif  // GRPC_faiss_5fgrpc_2eproto__INCLUDED
