// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faiss_grpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_faiss_5fgrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_faiss_5fgrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_faiss_5fgrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_faiss_5fgrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_faiss_5fgrpc_2eproto;
namespace faiss_grpc {
class BatchVec;
struct BatchVecDefaultTypeInternal;
extern BatchVecDefaultTypeInternal _BatchVec_default_instance_;
class IndexDetail;
struct IndexDetailDefaultTypeInternal;
extern IndexDetailDefaultTypeInternal _IndexDetail_default_instance_;
class ListQuery;
struct ListQueryDefaultTypeInternal;
extern ListQueryDefaultTypeInternal _ListQuery_default_instance_;
class ListResponse;
struct ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
class MetadataQuery;
struct MetadataQueryDefaultTypeInternal;
extern MetadataQueryDefaultTypeInternal _MetadataQuery_default_instance_;
class MetadataResponse;
struct MetadataResponseDefaultTypeInternal;
extern MetadataResponseDefaultTypeInternal _MetadataResponse_default_instance_;
class Query;
struct QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class ReloadQuery;
struct ReloadQueryDefaultTypeInternal;
extern ReloadQueryDefaultTypeInternal _ReloadQuery_default_instance_;
class ReloadResponse;
struct ReloadResponseDefaultTypeInternal;
extern ReloadResponseDefaultTypeInternal _ReloadResponse_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ResponseStatus;
struct ResponseStatusDefaultTypeInternal;
extern ResponseStatusDefaultTypeInternal _ResponseStatus_default_instance_;
class TopK;
struct TopKDefaultTypeInternal;
extern TopKDefaultTypeInternal _TopK_default_instance_;
class Vec;
struct VecDefaultTypeInternal;
extern VecDefaultTypeInternal _Vec_default_instance_;
}  // namespace faiss_grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::faiss_grpc::BatchVec* Arena::CreateMaybeMessage<::faiss_grpc::BatchVec>(Arena*);
template<> ::faiss_grpc::IndexDetail* Arena::CreateMaybeMessage<::faiss_grpc::IndexDetail>(Arena*);
template<> ::faiss_grpc::ListQuery* Arena::CreateMaybeMessage<::faiss_grpc::ListQuery>(Arena*);
template<> ::faiss_grpc::ListResponse* Arena::CreateMaybeMessage<::faiss_grpc::ListResponse>(Arena*);
template<> ::faiss_grpc::MetadataQuery* Arena::CreateMaybeMessage<::faiss_grpc::MetadataQuery>(Arena*);
template<> ::faiss_grpc::MetadataResponse* Arena::CreateMaybeMessage<::faiss_grpc::MetadataResponse>(Arena*);
template<> ::faiss_grpc::Query* Arena::CreateMaybeMessage<::faiss_grpc::Query>(Arena*);
template<> ::faiss_grpc::ReloadQuery* Arena::CreateMaybeMessage<::faiss_grpc::ReloadQuery>(Arena*);
template<> ::faiss_grpc::ReloadResponse* Arena::CreateMaybeMessage<::faiss_grpc::ReloadResponse>(Arena*);
template<> ::faiss_grpc::Response* Arena::CreateMaybeMessage<::faiss_grpc::Response>(Arena*);
template<> ::faiss_grpc::ResponseStatus* Arena::CreateMaybeMessage<::faiss_grpc::ResponseStatus>(Arena*);
template<> ::faiss_grpc::TopK* Arena::CreateMaybeMessage<::faiss_grpc::TopK>(Arena*);
template<> ::faiss_grpc::Vec* Arena::CreateMaybeMessage<::faiss_grpc::Vec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace faiss_grpc {

enum ResponseStatus_Stat : int {
  ResponseStatus_Stat_SUCCEED = 0,
  ResponseStatus_Stat_FAILED = 1,
  ResponseStatus_Stat_ResponseStatus_Stat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResponseStatus_Stat_ResponseStatus_Stat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResponseStatus_Stat_IsValid(int value);
constexpr ResponseStatus_Stat ResponseStatus_Stat_Stat_MIN = ResponseStatus_Stat_SUCCEED;
constexpr ResponseStatus_Stat ResponseStatus_Stat_Stat_MAX = ResponseStatus_Stat_FAILED;
constexpr int ResponseStatus_Stat_Stat_ARRAYSIZE = ResponseStatus_Stat_Stat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseStatus_Stat_descriptor();
template<typename T>
inline const std::string& ResponseStatus_Stat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseStatus_Stat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseStatus_Stat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseStatus_Stat_descriptor(), enum_t_value);
}
inline bool ResponseStatus_Stat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResponseStatus_Stat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseStatus_Stat>(
    ResponseStatus_Stat_descriptor(), name, value);
}
enum IndexDetail_MetricType : int {
  IndexDetail_MetricType_METRIC_INNER_PRODUCT = 0,
  IndexDetail_MetricType_METRIC_L2 = 1,
  IndexDetail_MetricType_METRIC_L1 = 2,
  IndexDetail_MetricType_METRIC_Linf = 3,
  IndexDetail_MetricType_METRIC_Lp = 4,
  IndexDetail_MetricType_METRIC_Canberra = 20,
  IndexDetail_MetricType_METRIC_BrayCurtis = 21,
  IndexDetail_MetricType_METRIC_JensenShannon = 22,
  IndexDetail_MetricType_IndexDetail_MetricType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IndexDetail_MetricType_IndexDetail_MetricType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IndexDetail_MetricType_IsValid(int value);
constexpr IndexDetail_MetricType IndexDetail_MetricType_MetricType_MIN = IndexDetail_MetricType_METRIC_INNER_PRODUCT;
constexpr IndexDetail_MetricType IndexDetail_MetricType_MetricType_MAX = IndexDetail_MetricType_METRIC_JensenShannon;
constexpr int IndexDetail_MetricType_MetricType_ARRAYSIZE = IndexDetail_MetricType_MetricType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexDetail_MetricType_descriptor();
template<typename T>
inline const std::string& IndexDetail_MetricType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IndexDetail_MetricType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IndexDetail_MetricType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IndexDetail_MetricType_descriptor(), enum_t_value);
}
inline bool IndexDetail_MetricType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IndexDetail_MetricType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexDetail_MetricType>(
    IndexDetail_MetricType_descriptor(), name, value);
}
// ===================================================================

class Vec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.Vec) */ {
 public:
  inline Vec() : Vec(nullptr) {}
  ~Vec() override;
  explicit constexpr Vec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vec(const Vec& from);
  Vec(Vec&& from) noexcept
    : Vec() {
    *this = ::std::move(from);
  }

  inline Vec& operator=(const Vec& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec& operator=(Vec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vec& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vec* internal_default_instance() {
    return reinterpret_cast<const Vec*>(
               &_Vec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec& a, Vec& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec* New() const final {
    return new Vec();
  }

  Vec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec& from);
  void MergeFrom(const Vec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.Vec";
  }
  protected:
  explicit Vec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated float elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  private:
  float _internal_elements(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_elements() const;
  void _internal_add_elements(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_elements();
  public:
  float elements(int index) const;
  void set_elements(int index, float value);
  void add_elements(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      elements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_elements();

  // @@protoc_insertion_point(class_scope:faiss_grpc.Vec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class BatchVec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.BatchVec) */ {
 public:
  inline BatchVec() : BatchVec(nullptr) {}
  ~BatchVec() override;
  explicit constexpr BatchVec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchVec(const BatchVec& from);
  BatchVec(BatchVec&& from) noexcept
    : BatchVec() {
    *this = ::std::move(from);
  }

  inline BatchVec& operator=(const BatchVec& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchVec& operator=(BatchVec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchVec& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchVec* internal_default_instance() {
    return reinterpret_cast<const BatchVec*>(
               &_BatchVec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BatchVec& a, BatchVec& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchVec* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchVec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchVec* New() const final {
    return new BatchVec();
  }

  BatchVec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchVec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchVec& from);
  void MergeFrom(const BatchVec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchVec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.BatchVec";
  }
  protected:
  explicit BatchVec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchFieldNumber = 1,
  };
  // repeated .faiss_grpc.Vec batch = 1;
  int batch_size() const;
  private:
  int _internal_batch_size() const;
  public:
  void clear_batch();
  ::faiss_grpc::Vec* mutable_batch(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss_grpc::Vec >*
      mutable_batch();
  private:
  const ::faiss_grpc::Vec& _internal_batch(int index) const;
  ::faiss_grpc::Vec* _internal_add_batch();
  public:
  const ::faiss_grpc::Vec& batch(int index) const;
  ::faiss_grpc::Vec* add_batch();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss_grpc::Vec >&
      batch() const;

  // @@protoc_insertion_point(class_scope:faiss_grpc.BatchVec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss_grpc::Vec > batch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class Query final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  ~Query() override;
  explicit constexpr Query(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return new Query();
  }

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.Query";
  }
  protected:
  explicit Query(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIndexNameFieldNumber = 2,
    kQueryVecsFieldNumber = 4,
    kKFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string index_name = 2;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // .faiss_grpc.BatchVec query_vecs = 4;
  bool has_query_vecs() const;
  private:
  bool _internal_has_query_vecs() const;
  public:
  void clear_query_vecs();
  const ::faiss_grpc::BatchVec& query_vecs() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::faiss_grpc::BatchVec* release_query_vecs();
  ::faiss_grpc::BatchVec* mutable_query_vecs();
  void set_allocated_query_vecs(::faiss_grpc::BatchVec* query_vecs);
  private:
  const ::faiss_grpc::BatchVec& _internal_query_vecs() const;
  ::faiss_grpc::BatchVec* _internal_mutable_query_vecs();
  public:
  void unsafe_arena_set_allocated_query_vecs(
      ::faiss_grpc::BatchVec* query_vecs);
  ::faiss_grpc::BatchVec* unsafe_arena_release_query_vecs();

  // int32 k = 3;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:faiss_grpc.Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::faiss_grpc::BatchVec* query_vecs_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class ResponseStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.ResponseStatus) */ {
 public:
  inline ResponseStatus() : ResponseStatus(nullptr) {}
  ~ResponseStatus() override;
  explicit constexpr ResponseStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseStatus(const ResponseStatus& from);
  ResponseStatus(ResponseStatus&& from) noexcept
    : ResponseStatus() {
    *this = ::std::move(from);
  }

  inline ResponseStatus& operator=(const ResponseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseStatus& operator=(ResponseStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseStatus* internal_default_instance() {
    return reinterpret_cast<const ResponseStatus*>(
               &_ResponseStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseStatus& a, ResponseStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseStatus* New() const final {
    return new ResponseStatus();
  }

  ResponseStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseStatus& from);
  void MergeFrom(const ResponseStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.ResponseStatus";
  }
  protected:
  explicit ResponseStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResponseStatus_Stat Stat;
  static constexpr Stat SUCCEED =
    ResponseStatus_Stat_SUCCEED;
  static constexpr Stat FAILED =
    ResponseStatus_Stat_FAILED;
  static inline bool Stat_IsValid(int value) {
    return ResponseStatus_Stat_IsValid(value);
  }
  static constexpr Stat Stat_MIN =
    ResponseStatus_Stat_Stat_MIN;
  static constexpr Stat Stat_MAX =
    ResponseStatus_Stat_Stat_MAX;
  static constexpr int Stat_ARRAYSIZE =
    ResponseStatus_Stat_Stat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Stat_descriptor() {
    return ResponseStatus_Stat_descriptor();
  }
  template<typename T>
  static inline const std::string& Stat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Stat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Stat_Name.");
    return ResponseStatus_Stat_Name(enum_t_value);
  }
  static inline bool Stat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Stat* value) {
    return ResponseStatus_Stat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .faiss_grpc.ResponseStatus.Stat status = 1;
  void clear_status();
  ::faiss_grpc::ResponseStatus_Stat status() const;
  void set_status(::faiss_grpc::ResponseStatus_Stat value);
  private:
  ::faiss_grpc::ResponseStatus_Stat _internal_status() const;
  void _internal_set_status(::faiss_grpc::ResponseStatus_Stat value);
  public:

  // @@protoc_insertion_point(class_scope:faiss_grpc.ResponseStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class TopK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.TopK) */ {
 public:
  inline TopK() : TopK(nullptr) {}
  ~TopK() override;
  explicit constexpr TopK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopK(const TopK& from);
  TopK(TopK&& from) noexcept
    : TopK() {
    *this = ::std::move(from);
  }

  inline TopK& operator=(const TopK& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopK& operator=(TopK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopK& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopK* internal_default_instance() {
    return reinterpret_cast<const TopK*>(
               &_TopK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TopK& a, TopK& b) {
    a.Swap(&b);
  }
  inline void Swap(TopK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopK* New() const final {
    return new TopK();
  }

  TopK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopK& from);
  void MergeFrom(const TopK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.TopK";
  }
  protected:
  explicit TopK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankFieldNumber = 1,
  };
  // repeated int64 rank = 1;
  int rank_size() const;
  private:
  int _internal_rank_size() const;
  public:
  void clear_rank();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rank(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_rank() const;
  void _internal_add_rank(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_rank();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 rank(int index) const;
  void set_rank(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_rank(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      rank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_rank();

  // @@protoc_insertion_point(class_scope:faiss_grpc.TopK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > rank_;
  mutable std::atomic<int> _rank_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return new Response();
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 3,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .faiss_grpc.TopK result = 3;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::faiss_grpc::TopK* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss_grpc::TopK >*
      mutable_result();
  private:
  const ::faiss_grpc::TopK& _internal_result(int index) const;
  ::faiss_grpc::TopK* _internal_add_result();
  public:
  const ::faiss_grpc::TopK& result(int index) const;
  ::faiss_grpc::TopK* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss_grpc::TopK >&
      result() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .faiss_grpc.ResponseStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::faiss_grpc::ResponseStatus& status() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::faiss_grpc::ResponseStatus* release_status();
  ::faiss_grpc::ResponseStatus* mutable_status();
  void set_allocated_status(::faiss_grpc::ResponseStatus* status);
  private:
  const ::faiss_grpc::ResponseStatus& _internal_status() const;
  ::faiss_grpc::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::faiss_grpc::ResponseStatus* status);
  ::faiss_grpc::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:faiss_grpc.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss_grpc::TopK > result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::faiss_grpc::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class ListQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.ListQuery) */ {
 public:
  inline ListQuery() : ListQuery(nullptr) {}
  ~ListQuery() override;
  explicit constexpr ListQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListQuery(const ListQuery& from);
  ListQuery(ListQuery&& from) noexcept
    : ListQuery() {
    *this = ::std::move(from);
  }

  inline ListQuery& operator=(const ListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListQuery& operator=(ListQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListQuery* internal_default_instance() {
    return reinterpret_cast<const ListQuery*>(
               &_ListQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListQuery& a, ListQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ListQuery* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListQuery* New() const final {
    return new ListQuery();
  }

  ListQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListQuery& from);
  void MergeFrom(const ListQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.ListQuery";
  }
  protected:
  explicit ListQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:faiss_grpc.ListQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class ListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.ListResponse) */ {
 public:
  inline ListResponse() : ListResponse(nullptr) {}
  ~ListResponse() override;
  explicit constexpr ListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListResponse(const ListResponse& from);
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListResponse* New() const final {
    return new ListResponse();
  }

  ListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListResponse& from);
  void MergeFrom(const ListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.ListResponse";
  }
  protected:
  explicit ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNamesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string index_names = 2;
  int index_names_size() const;
  private:
  int _internal_index_names_size() const;
  public:
  void clear_index_names();
  const std::string& index_names(int index) const;
  std::string* mutable_index_names(int index);
  void set_index_names(int index, const std::string& value);
  void set_index_names(int index, std::string&& value);
  void set_index_names(int index, const char* value);
  void set_index_names(int index, const char* value, size_t size);
  std::string* add_index_names();
  void add_index_names(const std::string& value);
  void add_index_names(std::string&& value);
  void add_index_names(const char* value);
  void add_index_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& index_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_index_names();
  private:
  const std::string& _internal_index_names(int index) const;
  std::string* _internal_add_index_names();
  public:

  // .faiss_grpc.ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::faiss_grpc::ResponseStatus& status() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::faiss_grpc::ResponseStatus* release_status();
  ::faiss_grpc::ResponseStatus* mutable_status();
  void set_allocated_status(::faiss_grpc::ResponseStatus* status);
  private:
  const ::faiss_grpc::ResponseStatus& _internal_status() const;
  ::faiss_grpc::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::faiss_grpc::ResponseStatus* status);
  ::faiss_grpc::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:faiss_grpc.ListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> index_names_;
  ::faiss_grpc::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class MetadataQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.MetadataQuery) */ {
 public:
  inline MetadataQuery() : MetadataQuery(nullptr) {}
  ~MetadataQuery() override;
  explicit constexpr MetadataQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetadataQuery(const MetadataQuery& from);
  MetadataQuery(MetadataQuery&& from) noexcept
    : MetadataQuery() {
    *this = ::std::move(from);
  }

  inline MetadataQuery& operator=(const MetadataQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataQuery& operator=(MetadataQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetadataQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetadataQuery* internal_default_instance() {
    return reinterpret_cast<const MetadataQuery*>(
               &_MetadataQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MetadataQuery& a, MetadataQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataQuery* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetadataQuery* New() const final {
    return new MetadataQuery();
  }

  MetadataQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetadataQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetadataQuery& from);
  void MergeFrom(const MetadataQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.MetadataQuery";
  }
  protected:
  explicit MetadataQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 1,
  };
  // string index_name = 1;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // @@protoc_insertion_point(class_scope:faiss_grpc.MetadataQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class IndexDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.IndexDetail) */ {
 public:
  inline IndexDetail() : IndexDetail(nullptr) {}
  ~IndexDetail() override;
  explicit constexpr IndexDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexDetail(const IndexDetail& from);
  IndexDetail(IndexDetail&& from) noexcept
    : IndexDetail() {
    *this = ::std::move(from);
  }

  inline IndexDetail& operator=(const IndexDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexDetail& operator=(IndexDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexDetail* internal_default_instance() {
    return reinterpret_cast<const IndexDetail*>(
               &_IndexDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IndexDetail& a, IndexDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexDetail* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexDetail* New() const final {
    return new IndexDetail();
  }

  IndexDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexDetail& from);
  void MergeFrom(const IndexDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.IndexDetail";
  }
  protected:
  explicit IndexDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IndexDetail_MetricType MetricType;
  static constexpr MetricType METRIC_INNER_PRODUCT =
    IndexDetail_MetricType_METRIC_INNER_PRODUCT;
  static constexpr MetricType METRIC_L2 =
    IndexDetail_MetricType_METRIC_L2;
  static constexpr MetricType METRIC_L1 =
    IndexDetail_MetricType_METRIC_L1;
  static constexpr MetricType METRIC_Linf =
    IndexDetail_MetricType_METRIC_Linf;
  static constexpr MetricType METRIC_Lp =
    IndexDetail_MetricType_METRIC_Lp;
  static constexpr MetricType METRIC_Canberra =
    IndexDetail_MetricType_METRIC_Canberra;
  static constexpr MetricType METRIC_BrayCurtis =
    IndexDetail_MetricType_METRIC_BrayCurtis;
  static constexpr MetricType METRIC_JensenShannon =
    IndexDetail_MetricType_METRIC_JensenShannon;
  static inline bool MetricType_IsValid(int value) {
    return IndexDetail_MetricType_IsValid(value);
  }
  static constexpr MetricType MetricType_MIN =
    IndexDetail_MetricType_MetricType_MIN;
  static constexpr MetricType MetricType_MAX =
    IndexDetail_MetricType_MetricType_MAX;
  static constexpr int MetricType_ARRAYSIZE =
    IndexDetail_MetricType_MetricType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MetricType_descriptor() {
    return IndexDetail_MetricType_descriptor();
  }
  template<typename T>
  static inline const std::string& MetricType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MetricType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MetricType_Name.");
    return IndexDetail_MetricType_Name(enum_t_value);
  }
  static inline bool MetricType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MetricType* value) {
    return IndexDetail_MetricType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 1,
    kIndexPathFieldNumber = 2,
    kLastLoadTimestampFieldNumber = 3,
    kDFieldNumber = 4,
    kNtotalFieldNumber = 5,
    kIsTrainedFieldNumber = 6,
    kMetricTypeFieldNumber = 7,
    kMetricArgFieldNumber = 8,
  };
  // string index_name = 1;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // string index_path = 2;
  void clear_index_path();
  const std::string& index_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_path();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_index_path();
  void set_allocated_index_path(std::string* index_path);
  private:
  const std::string& _internal_index_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_path(const std::string& value);
  std::string* _internal_mutable_index_path();
  public:

  // int64 last_load_timestamp = 3;
  void clear_last_load_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_load_timestamp() const;
  void set_last_load_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_load_timestamp() const;
  void _internal_set_last_load_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 d = 4;
  void clear_d();
  ::PROTOBUF_NAMESPACE_ID::int32 d() const;
  void set_d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_d() const;
  void _internal_set_d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ntotal = 5;
  void clear_ntotal();
  ::PROTOBUF_NAMESPACE_ID::int32 ntotal() const;
  void set_ntotal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ntotal() const;
  void _internal_set_ntotal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_trained = 6;
  void clear_is_trained();
  bool is_trained() const;
  void set_is_trained(bool value);
  private:
  bool _internal_is_trained() const;
  void _internal_set_is_trained(bool value);
  public:

  // .faiss_grpc.IndexDetail.MetricType metric_type = 7;
  void clear_metric_type();
  ::faiss_grpc::IndexDetail_MetricType metric_type() const;
  void set_metric_type(::faiss_grpc::IndexDetail_MetricType value);
  private:
  ::faiss_grpc::IndexDetail_MetricType _internal_metric_type() const;
  void _internal_set_metric_type(::faiss_grpc::IndexDetail_MetricType value);
  public:

  // float metric_arg = 8;
  void clear_metric_arg();
  float metric_arg() const;
  void set_metric_arg(float value);
  private:
  float _internal_metric_arg() const;
  void _internal_set_metric_arg(float value);
  public:

  // @@protoc_insertion_point(class_scope:faiss_grpc.IndexDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_path_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_load_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 d_;
  ::PROTOBUF_NAMESPACE_ID::int32 ntotal_;
  bool is_trained_;
  int metric_type_;
  float metric_arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class MetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.MetadataResponse) */ {
 public:
  inline MetadataResponse() : MetadataResponse(nullptr) {}
  ~MetadataResponse() override;
  explicit constexpr MetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetadataResponse(const MetadataResponse& from);
  MetadataResponse(MetadataResponse&& from) noexcept
    : MetadataResponse() {
    *this = ::std::move(from);
  }

  inline MetadataResponse& operator=(const MetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataResponse& operator=(MetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetadataResponse* internal_default_instance() {
    return reinterpret_cast<const MetadataResponse*>(
               &_MetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MetadataResponse& a, MetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetadataResponse* New() const final {
    return new MetadataResponse();
  }

  MetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetadataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetadataResponse& from);
  void MergeFrom(const MetadataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.MetadataResponse";
  }
  protected:
  explicit MetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDetailFieldNumber = 2,
  };
  // .faiss_grpc.ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::faiss_grpc::ResponseStatus& status() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::faiss_grpc::ResponseStatus* release_status();
  ::faiss_grpc::ResponseStatus* mutable_status();
  void set_allocated_status(::faiss_grpc::ResponseStatus* status);
  private:
  const ::faiss_grpc::ResponseStatus& _internal_status() const;
  ::faiss_grpc::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::faiss_grpc::ResponseStatus* status);
  ::faiss_grpc::ResponseStatus* unsafe_arena_release_status();

  // .faiss_grpc.IndexDetail detail = 2;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const ::faiss_grpc::IndexDetail& detail() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::faiss_grpc::IndexDetail* release_detail();
  ::faiss_grpc::IndexDetail* mutable_detail();
  void set_allocated_detail(::faiss_grpc::IndexDetail* detail);
  private:
  const ::faiss_grpc::IndexDetail& _internal_detail() const;
  ::faiss_grpc::IndexDetail* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::faiss_grpc::IndexDetail* detail);
  ::faiss_grpc::IndexDetail* unsafe_arena_release_detail();

  // @@protoc_insertion_point(class_scope:faiss_grpc.MetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::faiss_grpc::ResponseStatus* status_;
  ::faiss_grpc::IndexDetail* detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class ReloadQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.ReloadQuery) */ {
 public:
  inline ReloadQuery() : ReloadQuery(nullptr) {}
  ~ReloadQuery() override;
  explicit constexpr ReloadQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReloadQuery(const ReloadQuery& from);
  ReloadQuery(ReloadQuery&& from) noexcept
    : ReloadQuery() {
    *this = ::std::move(from);
  }

  inline ReloadQuery& operator=(const ReloadQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloadQuery& operator=(ReloadQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReloadQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReloadQuery* internal_default_instance() {
    return reinterpret_cast<const ReloadQuery*>(
               &_ReloadQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReloadQuery& a, ReloadQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ReloadQuery* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReloadQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReloadQuery* New() const final {
    return new ReloadQuery();
  }

  ReloadQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReloadQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReloadQuery& from);
  void MergeFrom(const ReloadQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReloadQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.ReloadQuery";
  }
  protected:
  explicit ReloadQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNamesFieldNumber = 1,
  };
  // repeated string index_names = 1;
  int index_names_size() const;
  private:
  int _internal_index_names_size() const;
  public:
  void clear_index_names();
  const std::string& index_names(int index) const;
  std::string* mutable_index_names(int index);
  void set_index_names(int index, const std::string& value);
  void set_index_names(int index, std::string&& value);
  void set_index_names(int index, const char* value);
  void set_index_names(int index, const char* value, size_t size);
  std::string* add_index_names();
  void add_index_names(const std::string& value);
  void add_index_names(std::string&& value);
  void add_index_names(const char* value);
  void add_index_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& index_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_index_names();
  private:
  const std::string& _internal_index_names(int index) const;
  std::string* _internal_add_index_names();
  public:

  // @@protoc_insertion_point(class_scope:faiss_grpc.ReloadQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> index_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class ReloadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faiss_grpc.ReloadResponse) */ {
 public:
  inline ReloadResponse() : ReloadResponse(nullptr) {}
  ~ReloadResponse() override;
  explicit constexpr ReloadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReloadResponse(const ReloadResponse& from);
  ReloadResponse(ReloadResponse&& from) noexcept
    : ReloadResponse() {
    *this = ::std::move(from);
  }

  inline ReloadResponse& operator=(const ReloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloadResponse& operator=(ReloadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReloadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReloadResponse* internal_default_instance() {
    return reinterpret_cast<const ReloadResponse*>(
               &_ReloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReloadResponse& a, ReloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReloadResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReloadResponse* New() const final {
    return new ReloadResponse();
  }

  ReloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReloadResponse& from);
  void MergeFrom(const ReloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faiss_grpc.ReloadResponse";
  }
  protected:
  explicit ReloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .faiss_grpc.ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::faiss_grpc::ResponseStatus& status() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::faiss_grpc::ResponseStatus* release_status();
  ::faiss_grpc::ResponseStatus* mutable_status();
  void set_allocated_status(::faiss_grpc::ResponseStatus* status);
  private:
  const ::faiss_grpc::ResponseStatus& _internal_status() const;
  ::faiss_grpc::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::faiss_grpc::ResponseStatus* status);
  ::faiss_grpc::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:faiss_grpc.ReloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::faiss_grpc::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faiss_5fgrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec

// repeated float elements = 1;
inline int Vec::_internal_elements_size() const {
  return elements_.size();
}
inline int Vec::elements_size() const {
  return _internal_elements_size();
}
inline void Vec::clear_elements() {
  elements_.Clear();
}
inline float Vec::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline float Vec::elements(int index) const {
  // @@protoc_insertion_point(field_get:faiss_grpc.Vec.elements)
  return _internal_elements(index);
}
inline void Vec::set_elements(int index, float value) {
  elements_.Set(index, value);
  // @@protoc_insertion_point(field_set:faiss_grpc.Vec.elements)
}
inline void Vec::_internal_add_elements(float value) {
  elements_.Add(value);
}
inline void Vec::add_elements(float value) {
  _internal_add_elements(value);
  // @@protoc_insertion_point(field_add:faiss_grpc.Vec.elements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vec::_internal_elements() const {
  return elements_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vec::elements() const {
  // @@protoc_insertion_point(field_list:faiss_grpc.Vec.elements)
  return _internal_elements();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vec::_internal_mutable_elements() {
  return &elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vec::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:faiss_grpc.Vec.elements)
  return _internal_mutable_elements();
}

// -------------------------------------------------------------------

// BatchVec

// repeated .faiss_grpc.Vec batch = 1;
inline int BatchVec::_internal_batch_size() const {
  return batch_.size();
}
inline int BatchVec::batch_size() const {
  return _internal_batch_size();
}
inline void BatchVec::clear_batch() {
  batch_.Clear();
}
inline ::faiss_grpc::Vec* BatchVec::mutable_batch(int index) {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.BatchVec.batch)
  return batch_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss_grpc::Vec >*
BatchVec::mutable_batch() {
  // @@protoc_insertion_point(field_mutable_list:faiss_grpc.BatchVec.batch)
  return &batch_;
}
inline const ::faiss_grpc::Vec& BatchVec::_internal_batch(int index) const {
  return batch_.Get(index);
}
inline const ::faiss_grpc::Vec& BatchVec::batch(int index) const {
  // @@protoc_insertion_point(field_get:faiss_grpc.BatchVec.batch)
  return _internal_batch(index);
}
inline ::faiss_grpc::Vec* BatchVec::_internal_add_batch() {
  return batch_.Add();
}
inline ::faiss_grpc::Vec* BatchVec::add_batch() {
  // @@protoc_insertion_point(field_add:faiss_grpc.BatchVec.batch)
  return _internal_add_batch();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss_grpc::Vec >&
BatchVec::batch() const {
  // @@protoc_insertion_point(field_list:faiss_grpc.BatchVec.batch)
  return batch_;
}

// -------------------------------------------------------------------

// Query

// string id = 1;
inline void Query::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Query::id() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.Query.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Query::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faiss_grpc.Query.id)
}
inline std::string* Query::mutable_id() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.Query.id)
  return _internal_mutable_id();
}
inline const std::string& Query::_internal_id() const {
  return id_.Get();
}
inline void Query::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Query::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Query::release_id() {
  // @@protoc_insertion_point(field_release:faiss_grpc.Query.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Query::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.Query.id)
}

// string index_name = 2;
inline void Query::clear_index_name() {
  index_name_.ClearToEmpty();
}
inline const std::string& Query::index_name() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.Query.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Query::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 index_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faiss_grpc.Query.index_name)
}
inline std::string* Query::mutable_index_name() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.Query.index_name)
  return _internal_mutable_index_name();
}
inline const std::string& Query::_internal_index_name() const {
  return index_name_.Get();
}
inline void Query::_internal_set_index_name(const std::string& value) {
  
  index_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Query::_internal_mutable_index_name() {
  
  return index_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Query::release_index_name() {
  // @@protoc_insertion_point(field_release:faiss_grpc.Query.index_name)
  return index_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Query::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.Query.index_name)
}

// int32 k = 3;
inline void Query::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Query::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Query::k() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.Query.k)
  return _internal_k();
}
inline void Query::_internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
}
inline void Query::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:faiss_grpc.Query.k)
}

// .faiss_grpc.BatchVec query_vecs = 4;
inline bool Query::_internal_has_query_vecs() const {
  return this != internal_default_instance() && query_vecs_ != nullptr;
}
inline bool Query::has_query_vecs() const {
  return _internal_has_query_vecs();
}
inline void Query::clear_query_vecs() {
  if (GetArenaForAllocation() == nullptr && query_vecs_ != nullptr) {
    delete query_vecs_;
  }
  query_vecs_ = nullptr;
}
inline const ::faiss_grpc::BatchVec& Query::_internal_query_vecs() const {
  const ::faiss_grpc::BatchVec* p = query_vecs_;
  return p != nullptr ? *p : reinterpret_cast<const ::faiss_grpc::BatchVec&>(
      ::faiss_grpc::_BatchVec_default_instance_);
}
inline const ::faiss_grpc::BatchVec& Query::query_vecs() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.Query.query_vecs)
  return _internal_query_vecs();
}
inline void Query::unsafe_arena_set_allocated_query_vecs(
    ::faiss_grpc::BatchVec* query_vecs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_vecs_);
  }
  query_vecs_ = query_vecs;
  if (query_vecs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faiss_grpc.Query.query_vecs)
}
inline ::faiss_grpc::BatchVec* Query::release_query_vecs() {
  
  ::faiss_grpc::BatchVec* temp = query_vecs_;
  query_vecs_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::faiss_grpc::BatchVec* Query::unsafe_arena_release_query_vecs() {
  // @@protoc_insertion_point(field_release:faiss_grpc.Query.query_vecs)
  
  ::faiss_grpc::BatchVec* temp = query_vecs_;
  query_vecs_ = nullptr;
  return temp;
}
inline ::faiss_grpc::BatchVec* Query::_internal_mutable_query_vecs() {
  
  if (query_vecs_ == nullptr) {
    auto* p = CreateMaybeMessage<::faiss_grpc::BatchVec>(GetArenaForAllocation());
    query_vecs_ = p;
  }
  return query_vecs_;
}
inline ::faiss_grpc::BatchVec* Query::mutable_query_vecs() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.Query.query_vecs)
  return _internal_mutable_query_vecs();
}
inline void Query::set_allocated_query_vecs(::faiss_grpc::BatchVec* query_vecs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete query_vecs_;
  }
  if (query_vecs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::faiss_grpc::BatchVec>::GetOwningArena(query_vecs);
    if (message_arena != submessage_arena) {
      query_vecs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_vecs, submessage_arena);
    }
    
  } else {
    
  }
  query_vecs_ = query_vecs;
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.Query.query_vecs)
}

// -------------------------------------------------------------------

// ResponseStatus

// .faiss_grpc.ResponseStatus.Stat status = 1;
inline void ResponseStatus::clear_status() {
  status_ = 0;
}
inline ::faiss_grpc::ResponseStatus_Stat ResponseStatus::_internal_status() const {
  return static_cast< ::faiss_grpc::ResponseStatus_Stat >(status_);
}
inline ::faiss_grpc::ResponseStatus_Stat ResponseStatus::status() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.ResponseStatus.status)
  return _internal_status();
}
inline void ResponseStatus::_internal_set_status(::faiss_grpc::ResponseStatus_Stat value) {
  
  status_ = value;
}
inline void ResponseStatus::set_status(::faiss_grpc::ResponseStatus_Stat value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:faiss_grpc.ResponseStatus.status)
}

// string message = 2;
inline void ResponseStatus::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ResponseStatus::message() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.ResponseStatus.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseStatus::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faiss_grpc.ResponseStatus.message)
}
inline std::string* ResponseStatus::mutable_message() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.ResponseStatus.message)
  return _internal_mutable_message();
}
inline const std::string& ResponseStatus::_internal_message() const {
  return message_.Get();
}
inline void ResponseStatus::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseStatus::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseStatus::release_message() {
  // @@protoc_insertion_point(field_release:faiss_grpc.ResponseStatus.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseStatus::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.ResponseStatus.message)
}

// -------------------------------------------------------------------

// TopK

// repeated int64 rank = 1;
inline int TopK::_internal_rank_size() const {
  return rank_.size();
}
inline int TopK::rank_size() const {
  return _internal_rank_size();
}
inline void TopK::clear_rank() {
  rank_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopK::_internal_rank(int index) const {
  return rank_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopK::rank(int index) const {
  // @@protoc_insertion_point(field_get:faiss_grpc.TopK.rank)
  return _internal_rank(index);
}
inline void TopK::set_rank(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  rank_.Set(index, value);
  // @@protoc_insertion_point(field_set:faiss_grpc.TopK.rank)
}
inline void TopK::_internal_add_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  rank_.Add(value);
}
inline void TopK::add_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_rank(value);
  // @@protoc_insertion_point(field_add:faiss_grpc.TopK.rank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TopK::_internal_rank() const {
  return rank_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TopK::rank() const {
  // @@protoc_insertion_point(field_list:faiss_grpc.TopK.rank)
  return _internal_rank();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TopK::_internal_mutable_rank() {
  return &rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TopK::mutable_rank() {
  // @@protoc_insertion_point(field_mutable_list:faiss_grpc.TopK.rank)
  return _internal_mutable_rank();
}

// -------------------------------------------------------------------

// Response

// string id = 1;
inline void Response::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Response::id() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.Response.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faiss_grpc.Response.id)
}
inline std::string* Response::mutable_id() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.Response.id)
  return _internal_mutable_id();
}
inline const std::string& Response::_internal_id() const {
  return id_.Get();
}
inline void Response::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_id() {
  // @@protoc_insertion_point(field_release:faiss_grpc.Response.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Response::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.Response.id)
}

// .faiss_grpc.ResponseStatus status = 2;
inline bool Response::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Response::has_status() const {
  return _internal_has_status();
}
inline void Response::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::faiss_grpc::ResponseStatus& Response::_internal_status() const {
  const ::faiss_grpc::ResponseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::faiss_grpc::ResponseStatus&>(
      ::faiss_grpc::_ResponseStatus_default_instance_);
}
inline const ::faiss_grpc::ResponseStatus& Response::status() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.Response.status)
  return _internal_status();
}
inline void Response::unsafe_arena_set_allocated_status(
    ::faiss_grpc::ResponseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faiss_grpc.Response.status)
}
inline ::faiss_grpc::ResponseStatus* Response::release_status() {
  
  ::faiss_grpc::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::faiss_grpc::ResponseStatus* Response::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:faiss_grpc.Response.status)
  
  ::faiss_grpc::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::faiss_grpc::ResponseStatus* Response::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::faiss_grpc::ResponseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::faiss_grpc::ResponseStatus* Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.Response.status)
  return _internal_mutable_status();
}
inline void Response::set_allocated_status(::faiss_grpc::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::faiss_grpc::ResponseStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.Response.status)
}

// repeated .faiss_grpc.TopK result = 3;
inline int Response::_internal_result_size() const {
  return result_.size();
}
inline int Response::result_size() const {
  return _internal_result_size();
}
inline void Response::clear_result() {
  result_.Clear();
}
inline ::faiss_grpc::TopK* Response::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.Response.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss_grpc::TopK >*
Response::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:faiss_grpc.Response.result)
  return &result_;
}
inline const ::faiss_grpc::TopK& Response::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::faiss_grpc::TopK& Response::result(int index) const {
  // @@protoc_insertion_point(field_get:faiss_grpc.Response.result)
  return _internal_result(index);
}
inline ::faiss_grpc::TopK* Response::_internal_add_result() {
  return result_.Add();
}
inline ::faiss_grpc::TopK* Response::add_result() {
  // @@protoc_insertion_point(field_add:faiss_grpc.Response.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faiss_grpc::TopK >&
Response::result() const {
  // @@protoc_insertion_point(field_list:faiss_grpc.Response.result)
  return result_;
}

// -------------------------------------------------------------------

// ListQuery

// -------------------------------------------------------------------

// ListResponse

// .faiss_grpc.ResponseStatus status = 1;
inline bool ListResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ListResponse::has_status() const {
  return _internal_has_status();
}
inline void ListResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::faiss_grpc::ResponseStatus& ListResponse::_internal_status() const {
  const ::faiss_grpc::ResponseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::faiss_grpc::ResponseStatus&>(
      ::faiss_grpc::_ResponseStatus_default_instance_);
}
inline const ::faiss_grpc::ResponseStatus& ListResponse::status() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.ListResponse.status)
  return _internal_status();
}
inline void ListResponse::unsafe_arena_set_allocated_status(
    ::faiss_grpc::ResponseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faiss_grpc.ListResponse.status)
}
inline ::faiss_grpc::ResponseStatus* ListResponse::release_status() {
  
  ::faiss_grpc::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::faiss_grpc::ResponseStatus* ListResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:faiss_grpc.ListResponse.status)
  
  ::faiss_grpc::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::faiss_grpc::ResponseStatus* ListResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::faiss_grpc::ResponseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::faiss_grpc::ResponseStatus* ListResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.ListResponse.status)
  return _internal_mutable_status();
}
inline void ListResponse::set_allocated_status(::faiss_grpc::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::faiss_grpc::ResponseStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.ListResponse.status)
}

// repeated string index_names = 2;
inline int ListResponse::_internal_index_names_size() const {
  return index_names_.size();
}
inline int ListResponse::index_names_size() const {
  return _internal_index_names_size();
}
inline void ListResponse::clear_index_names() {
  index_names_.Clear();
}
inline std::string* ListResponse::add_index_names() {
  // @@protoc_insertion_point(field_add_mutable:faiss_grpc.ListResponse.index_names)
  return _internal_add_index_names();
}
inline const std::string& ListResponse::_internal_index_names(int index) const {
  return index_names_.Get(index);
}
inline const std::string& ListResponse::index_names(int index) const {
  // @@protoc_insertion_point(field_get:faiss_grpc.ListResponse.index_names)
  return _internal_index_names(index);
}
inline std::string* ListResponse::mutable_index_names(int index) {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.ListResponse.index_names)
  return index_names_.Mutable(index);
}
inline void ListResponse::set_index_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:faiss_grpc.ListResponse.index_names)
  index_names_.Mutable(index)->assign(value);
}
inline void ListResponse::set_index_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:faiss_grpc.ListResponse.index_names)
  index_names_.Mutable(index)->assign(std::move(value));
}
inline void ListResponse::set_index_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  index_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:faiss_grpc.ListResponse.index_names)
}
inline void ListResponse::set_index_names(int index, const char* value, size_t size) {
  index_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:faiss_grpc.ListResponse.index_names)
}
inline std::string* ListResponse::_internal_add_index_names() {
  return index_names_.Add();
}
inline void ListResponse::add_index_names(const std::string& value) {
  index_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:faiss_grpc.ListResponse.index_names)
}
inline void ListResponse::add_index_names(std::string&& value) {
  index_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:faiss_grpc.ListResponse.index_names)
}
inline void ListResponse::add_index_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  index_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:faiss_grpc.ListResponse.index_names)
}
inline void ListResponse::add_index_names(const char* value, size_t size) {
  index_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:faiss_grpc.ListResponse.index_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListResponse::index_names() const {
  // @@protoc_insertion_point(field_list:faiss_grpc.ListResponse.index_names)
  return index_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListResponse::mutable_index_names() {
  // @@protoc_insertion_point(field_mutable_list:faiss_grpc.ListResponse.index_names)
  return &index_names_;
}

// -------------------------------------------------------------------

// MetadataQuery

// string index_name = 1;
inline void MetadataQuery::clear_index_name() {
  index_name_.ClearToEmpty();
}
inline const std::string& MetadataQuery::index_name() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.MetadataQuery.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetadataQuery::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 index_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faiss_grpc.MetadataQuery.index_name)
}
inline std::string* MetadataQuery::mutable_index_name() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.MetadataQuery.index_name)
  return _internal_mutable_index_name();
}
inline const std::string& MetadataQuery::_internal_index_name() const {
  return index_name_.Get();
}
inline void MetadataQuery::_internal_set_index_name(const std::string& value) {
  
  index_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetadataQuery::_internal_mutable_index_name() {
  
  return index_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetadataQuery::release_index_name() {
  // @@protoc_insertion_point(field_release:faiss_grpc.MetadataQuery.index_name)
  return index_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetadataQuery::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.MetadataQuery.index_name)
}

// -------------------------------------------------------------------

// IndexDetail

// string index_name = 1;
inline void IndexDetail::clear_index_name() {
  index_name_.ClearToEmpty();
}
inline const std::string& IndexDetail::index_name() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.IndexDetail.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexDetail::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 index_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faiss_grpc.IndexDetail.index_name)
}
inline std::string* IndexDetail::mutable_index_name() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.IndexDetail.index_name)
  return _internal_mutable_index_name();
}
inline const std::string& IndexDetail::_internal_index_name() const {
  return index_name_.Get();
}
inline void IndexDetail::_internal_set_index_name(const std::string& value) {
  
  index_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IndexDetail::_internal_mutable_index_name() {
  
  return index_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IndexDetail::release_index_name() {
  // @@protoc_insertion_point(field_release:faiss_grpc.IndexDetail.index_name)
  return index_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IndexDetail::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.IndexDetail.index_name)
}

// string index_path = 2;
inline void IndexDetail::clear_index_path() {
  index_path_.ClearToEmpty();
}
inline const std::string& IndexDetail::index_path() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.IndexDetail.index_path)
  return _internal_index_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexDetail::set_index_path(ArgT0&& arg0, ArgT... args) {
 
 index_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faiss_grpc.IndexDetail.index_path)
}
inline std::string* IndexDetail::mutable_index_path() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.IndexDetail.index_path)
  return _internal_mutable_index_path();
}
inline const std::string& IndexDetail::_internal_index_path() const {
  return index_path_.Get();
}
inline void IndexDetail::_internal_set_index_path(const std::string& value) {
  
  index_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IndexDetail::_internal_mutable_index_path() {
  
  return index_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IndexDetail::release_index_path() {
  // @@protoc_insertion_point(field_release:faiss_grpc.IndexDetail.index_path)
  return index_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IndexDetail::set_allocated_index_path(std::string* index_path) {
  if (index_path != nullptr) {
    
  } else {
    
  }
  index_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.IndexDetail.index_path)
}

// int64 last_load_timestamp = 3;
inline void IndexDetail::clear_last_load_timestamp() {
  last_load_timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexDetail::_internal_last_load_timestamp() const {
  return last_load_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexDetail::last_load_timestamp() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.IndexDetail.last_load_timestamp)
  return _internal_last_load_timestamp();
}
inline void IndexDetail::_internal_set_last_load_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_load_timestamp_ = value;
}
inline void IndexDetail::set_last_load_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_load_timestamp(value);
  // @@protoc_insertion_point(field_set:faiss_grpc.IndexDetail.last_load_timestamp)
}

// int32 d = 4;
inline void IndexDetail::clear_d() {
  d_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexDetail::_internal_d() const {
  return d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexDetail::d() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.IndexDetail.d)
  return _internal_d();
}
inline void IndexDetail::_internal_set_d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  d_ = value;
}
inline void IndexDetail::set_d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:faiss_grpc.IndexDetail.d)
}

// int32 ntotal = 5;
inline void IndexDetail::clear_ntotal() {
  ntotal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexDetail::_internal_ntotal() const {
  return ntotal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexDetail::ntotal() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.IndexDetail.ntotal)
  return _internal_ntotal();
}
inline void IndexDetail::_internal_set_ntotal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ntotal_ = value;
}
inline void IndexDetail::set_ntotal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ntotal(value);
  // @@protoc_insertion_point(field_set:faiss_grpc.IndexDetail.ntotal)
}

// bool is_trained = 6;
inline void IndexDetail::clear_is_trained() {
  is_trained_ = false;
}
inline bool IndexDetail::_internal_is_trained() const {
  return is_trained_;
}
inline bool IndexDetail::is_trained() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.IndexDetail.is_trained)
  return _internal_is_trained();
}
inline void IndexDetail::_internal_set_is_trained(bool value) {
  
  is_trained_ = value;
}
inline void IndexDetail::set_is_trained(bool value) {
  _internal_set_is_trained(value);
  // @@protoc_insertion_point(field_set:faiss_grpc.IndexDetail.is_trained)
}

// .faiss_grpc.IndexDetail.MetricType metric_type = 7;
inline void IndexDetail::clear_metric_type() {
  metric_type_ = 0;
}
inline ::faiss_grpc::IndexDetail_MetricType IndexDetail::_internal_metric_type() const {
  return static_cast< ::faiss_grpc::IndexDetail_MetricType >(metric_type_);
}
inline ::faiss_grpc::IndexDetail_MetricType IndexDetail::metric_type() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.IndexDetail.metric_type)
  return _internal_metric_type();
}
inline void IndexDetail::_internal_set_metric_type(::faiss_grpc::IndexDetail_MetricType value) {
  
  metric_type_ = value;
}
inline void IndexDetail::set_metric_type(::faiss_grpc::IndexDetail_MetricType value) {
  _internal_set_metric_type(value);
  // @@protoc_insertion_point(field_set:faiss_grpc.IndexDetail.metric_type)
}

// float metric_arg = 8;
inline void IndexDetail::clear_metric_arg() {
  metric_arg_ = 0;
}
inline float IndexDetail::_internal_metric_arg() const {
  return metric_arg_;
}
inline float IndexDetail::metric_arg() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.IndexDetail.metric_arg)
  return _internal_metric_arg();
}
inline void IndexDetail::_internal_set_metric_arg(float value) {
  
  metric_arg_ = value;
}
inline void IndexDetail::set_metric_arg(float value) {
  _internal_set_metric_arg(value);
  // @@protoc_insertion_point(field_set:faiss_grpc.IndexDetail.metric_arg)
}

// -------------------------------------------------------------------

// MetadataResponse

// .faiss_grpc.ResponseStatus status = 1;
inline bool MetadataResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MetadataResponse::has_status() const {
  return _internal_has_status();
}
inline void MetadataResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::faiss_grpc::ResponseStatus& MetadataResponse::_internal_status() const {
  const ::faiss_grpc::ResponseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::faiss_grpc::ResponseStatus&>(
      ::faiss_grpc::_ResponseStatus_default_instance_);
}
inline const ::faiss_grpc::ResponseStatus& MetadataResponse::status() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.MetadataResponse.status)
  return _internal_status();
}
inline void MetadataResponse::unsafe_arena_set_allocated_status(
    ::faiss_grpc::ResponseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faiss_grpc.MetadataResponse.status)
}
inline ::faiss_grpc::ResponseStatus* MetadataResponse::release_status() {
  
  ::faiss_grpc::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::faiss_grpc::ResponseStatus* MetadataResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:faiss_grpc.MetadataResponse.status)
  
  ::faiss_grpc::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::faiss_grpc::ResponseStatus* MetadataResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::faiss_grpc::ResponseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::faiss_grpc::ResponseStatus* MetadataResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.MetadataResponse.status)
  return _internal_mutable_status();
}
inline void MetadataResponse::set_allocated_status(::faiss_grpc::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::faiss_grpc::ResponseStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.MetadataResponse.status)
}

// .faiss_grpc.IndexDetail detail = 2;
inline bool MetadataResponse::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool MetadataResponse::has_detail() const {
  return _internal_has_detail();
}
inline void MetadataResponse::clear_detail() {
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
inline const ::faiss_grpc::IndexDetail& MetadataResponse::_internal_detail() const {
  const ::faiss_grpc::IndexDetail* p = detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::faiss_grpc::IndexDetail&>(
      ::faiss_grpc::_IndexDetail_default_instance_);
}
inline const ::faiss_grpc::IndexDetail& MetadataResponse::detail() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.MetadataResponse.detail)
  return _internal_detail();
}
inline void MetadataResponse::unsafe_arena_set_allocated_detail(
    ::faiss_grpc::IndexDetail* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faiss_grpc.MetadataResponse.detail)
}
inline ::faiss_grpc::IndexDetail* MetadataResponse::release_detail() {
  
  ::faiss_grpc::IndexDetail* temp = detail_;
  detail_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::faiss_grpc::IndexDetail* MetadataResponse::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:faiss_grpc.MetadataResponse.detail)
  
  ::faiss_grpc::IndexDetail* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::faiss_grpc::IndexDetail* MetadataResponse::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::faiss_grpc::IndexDetail>(GetArenaForAllocation());
    detail_ = p;
  }
  return detail_;
}
inline ::faiss_grpc::IndexDetail* MetadataResponse::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.MetadataResponse.detail)
  return _internal_mutable_detail();
}
inline void MetadataResponse::set_allocated_detail(::faiss_grpc::IndexDetail* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete detail_;
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::faiss_grpc::IndexDetail>::GetOwningArena(detail);
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.MetadataResponse.detail)
}

// -------------------------------------------------------------------

// ReloadQuery

// repeated string index_names = 1;
inline int ReloadQuery::_internal_index_names_size() const {
  return index_names_.size();
}
inline int ReloadQuery::index_names_size() const {
  return _internal_index_names_size();
}
inline void ReloadQuery::clear_index_names() {
  index_names_.Clear();
}
inline std::string* ReloadQuery::add_index_names() {
  // @@protoc_insertion_point(field_add_mutable:faiss_grpc.ReloadQuery.index_names)
  return _internal_add_index_names();
}
inline const std::string& ReloadQuery::_internal_index_names(int index) const {
  return index_names_.Get(index);
}
inline const std::string& ReloadQuery::index_names(int index) const {
  // @@protoc_insertion_point(field_get:faiss_grpc.ReloadQuery.index_names)
  return _internal_index_names(index);
}
inline std::string* ReloadQuery::mutable_index_names(int index) {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.ReloadQuery.index_names)
  return index_names_.Mutable(index);
}
inline void ReloadQuery::set_index_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:faiss_grpc.ReloadQuery.index_names)
  index_names_.Mutable(index)->assign(value);
}
inline void ReloadQuery::set_index_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:faiss_grpc.ReloadQuery.index_names)
  index_names_.Mutable(index)->assign(std::move(value));
}
inline void ReloadQuery::set_index_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  index_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:faiss_grpc.ReloadQuery.index_names)
}
inline void ReloadQuery::set_index_names(int index, const char* value, size_t size) {
  index_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:faiss_grpc.ReloadQuery.index_names)
}
inline std::string* ReloadQuery::_internal_add_index_names() {
  return index_names_.Add();
}
inline void ReloadQuery::add_index_names(const std::string& value) {
  index_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:faiss_grpc.ReloadQuery.index_names)
}
inline void ReloadQuery::add_index_names(std::string&& value) {
  index_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:faiss_grpc.ReloadQuery.index_names)
}
inline void ReloadQuery::add_index_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  index_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:faiss_grpc.ReloadQuery.index_names)
}
inline void ReloadQuery::add_index_names(const char* value, size_t size) {
  index_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:faiss_grpc.ReloadQuery.index_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReloadQuery::index_names() const {
  // @@protoc_insertion_point(field_list:faiss_grpc.ReloadQuery.index_names)
  return index_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReloadQuery::mutable_index_names() {
  // @@protoc_insertion_point(field_mutable_list:faiss_grpc.ReloadQuery.index_names)
  return &index_names_;
}

// -------------------------------------------------------------------

// ReloadResponse

// .faiss_grpc.ResponseStatus status = 1;
inline bool ReloadResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ReloadResponse::has_status() const {
  return _internal_has_status();
}
inline void ReloadResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::faiss_grpc::ResponseStatus& ReloadResponse::_internal_status() const {
  const ::faiss_grpc::ResponseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::faiss_grpc::ResponseStatus&>(
      ::faiss_grpc::_ResponseStatus_default_instance_);
}
inline const ::faiss_grpc::ResponseStatus& ReloadResponse::status() const {
  // @@protoc_insertion_point(field_get:faiss_grpc.ReloadResponse.status)
  return _internal_status();
}
inline void ReloadResponse::unsafe_arena_set_allocated_status(
    ::faiss_grpc::ResponseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faiss_grpc.ReloadResponse.status)
}
inline ::faiss_grpc::ResponseStatus* ReloadResponse::release_status() {
  
  ::faiss_grpc::ResponseStatus* temp = status_;
  status_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::faiss_grpc::ResponseStatus* ReloadResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:faiss_grpc.ReloadResponse.status)
  
  ::faiss_grpc::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::faiss_grpc::ResponseStatus* ReloadResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::faiss_grpc::ResponseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::faiss_grpc::ResponseStatus* ReloadResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:faiss_grpc.ReloadResponse.status)
  return _internal_mutable_status();
}
inline void ReloadResponse::set_allocated_status(::faiss_grpc::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::faiss_grpc::ResponseStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:faiss_grpc.ReloadResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace faiss_grpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::faiss_grpc::ResponseStatus_Stat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::faiss_grpc::ResponseStatus_Stat>() {
  return ::faiss_grpc::ResponseStatus_Stat_descriptor();
}
template <> struct is_proto_enum< ::faiss_grpc::IndexDetail_MetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::faiss_grpc::IndexDetail_MetricType>() {
  return ::faiss_grpc::IndexDetail_MetricType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_faiss_5fgrpc_2eproto
