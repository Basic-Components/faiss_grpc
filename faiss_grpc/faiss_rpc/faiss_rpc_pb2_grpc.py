# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import faiss_rpc.faiss_rpc_pb2 as faiss__rpc__pb2


class FaissRpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.search = channel.unary_unary(
                '/hszofficial.faiss_rpc.FaissRpc/search',
                request_serializer=faiss__rpc__pb2.Query.SerializeToString,
                response_deserializer=faiss__rpc__pb2.Response.FromString,
                )
        self.batch_search = channel.stream_stream(
                '/hszofficial.faiss_rpc.FaissRpc/batch_search',
                request_serializer=faiss__rpc__pb2.BatchQuery.SerializeToString,
                response_deserializer=faiss__rpc__pb2.BatchResponse.FromString,
                )


class FaissRpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batch_search(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaissRpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'search': grpc.unary_unary_rpc_method_handler(
                    servicer.search,
                    request_deserializer=faiss__rpc__pb2.Query.FromString,
                    response_serializer=faiss__rpc__pb2.Response.SerializeToString,
            ),
            'batch_search': grpc.stream_stream_rpc_method_handler(
                    servicer.batch_search,
                    request_deserializer=faiss__rpc__pb2.BatchQuery.FromString,
                    response_serializer=faiss__rpc__pb2.BatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hszofficial.faiss_rpc.FaissRpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FaissRpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hszofficial.faiss_rpc.FaissRpc/search',
            faiss__rpc__pb2.Query.SerializeToString,
            faiss__rpc__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def batch_search(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/hszofficial.faiss_rpc.FaissRpc/batch_search',
            faiss__rpc__pb2.BatchQuery.SerializeToString,
            faiss__rpc__pb2.BatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
